FUNCTION meta_data,fp,suffix
    OPENR, lun, fp, /GET_LUN
    IF lun EQ -1 THEN BEGIN
        PRINT, "文件打开失败"
    ENDIF ELSE BEGIN
        ;PRINT, "文件打开成功"
        line = ""
        header = HASH()
        WHILE NOT eof(lun) DO BEGIN
            READF, lun, line
            IF (STRPOS(line, "=") GT 0) AND (STRPOS(line, "{") EQ -1) THEN BEGIN
                tmp = STRSPLIT(line, "=",/EXTRACT)
                new_str = strtrim(tmp[0], 2)
                key = new_str
                new_str = strtrim(tmp[1], 2)
                value = new_str
                header[key] = value
                ;PRINT,key,"=",value
            ENDIF
            tmp = STRSPLIT(fp, ".",/EXTRACT)
            header["file name"] = tmp[0] + "." + suffix
        END
        FREE_LUN, lun
        return,header
    END
END


FUNCTION read_data,header
    ; 读取二进制文件头信息
    fp = header["file name"]
    dtype = fix(header['data type'])
    n_bands = uint(header['bands'])
    samples = uint(header['samples'])
    lines = uint(header['lines'])

    data = UINTARR(n_bands,samples,lines)
    OPENU, lun, fp, /GET_LUN
    IF lun EQ -1 THEN BEGIN
        PRINT, "文件打开失败"
    ENDIF ELSE BEGIN
        ;PRINT, "文件打开成功"

        ; 读取图像数据
        FOR index = 0, n_bands-1 DO BEGIN
            band_data = bytarr(samples,lines)
            readu, lun, band_data
            data[index,*,*] = band_data[*,*]
        ENDFOR
        free_lun, lun;
        RETURN,data
    ENDELSE
    return, -1
END

FUNCTION compute,data
    COMPILE_OPT idl2
    tmp = size(data)
    b1 = bytarr(tmp[2],tmp[3])
    b2 = bytarr(tmp[2],tmp[3])
    b3 = bytarr(tmp[2],tmp[3])
    b1[*,*] = data[2,*,*]
    b2[*,*] = data[3,*,*]
    b3[*,*] = data[0,*,*]
    new_data = UINTARR(tmp[2],tmp[3])
    FOR i = 0, tmp[2]-1 DO BEGIN
        FOR j = 0, tmp[3]-1 DO BEGIN
            new_data[i,j] = VegEnhanceJRY(b1[i,j],b2[i,j],b3[i,j])
        ENDFOR
    ENDFOR
    return, new_data
END


FUNCTION putout_data,data,output_dir,file_name,task
    ;不支持文件覆写
    ;发生冲突时请先关闭 IDL 再手动删除已经存在的文件
    COMPILE_OPT idl2
    e=envi()
    out_name = file_name + "_" + task + ".tif"
    out_path = output_dir + '\' + out_name
    data.Export,out_path, 'TIFF'
    View = e.GetView()
    Layer = View.CreateLayer(data) 
    return,0
END


PRO kaocha_3
    ;如果在e.OpenRaster  或者 ENVIQUACRaster 发生错误
    ;你可能需要重置IDL环境并手动在控制台执行以下两行
    ENVI,/RESTORE_BASE_SAVE_FILES
    e=envi()
    
    input_dir  = 'E:\CodeLearning\idl\in'
    output_dir = 'E:\CodeLearning\idl\out'

    ; 获取存储在 input_folder 中的所有图像文件
    files = FILE_SEARCH(input_dir + '\' + '*.hdr',COUNT=n_files)

    ; 循环遍历每个文件
    FOR i=0, n_files-1 DO BEGIN
        fp = files[i]
        filename = FILE_BASENAME(fp)
        ; 输出当前正在处理的文件名
        PRINT, 'Processing file: ' + filename
        out_name = STRSPLIT(filename,".",/EXTRACT)
        out_name = out_name[0]
        
        header = meta_data(fp,'dat')
        data_path = header["file name"]
        ; 读取输入图像


        data = e.OpenRaster(data_path)
        print,"quac!"
        quac_data = ENVIQUACRaster(data)
        data.Close
        ;stauts = putout_data(quac_data,output_dir,out_name,"QUAC")
        
        
        ;NDVI
        print,"NDVI!"
        result = ENVISpectralIndexRaster(quac_data,"NDVI") 
        ;stauts = putout_data(result,output_dir,out_name,"NDVI")
        ndvi = result.GetData(BANDS=0)
        
        
        ;EVI
        ;print,"EVI!"
        ;result = ENVISpectralIndexRaster(quac_data,"EVI") 
        ;stauts = putout_data(result,output_dir,out_name,"EVI")
        
        ;fvc
        print,"FVC!"
        ndvis = min(ndvi)
        ndviv = max(ndvi)
        fvc=(ndvi-ndvis)/(ndviv-ndvis)
        fvc=fvc>(0)
        fvc=fvc<(1)

        Temp_file = e.GetTemporaryFilename()
        result = ENVIRaster(fvc, URI=Temp_file, INHERITS_FROM=quac_data)
        result.Save
        stauts = putout_data(result,output_dir,out_name,"FVC")

        ; 显示结果
        TVSCL, result

    ENDFOR
END
